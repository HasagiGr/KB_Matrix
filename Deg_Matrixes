using System;
using System.Collections.Generic;
using System.Text;
using static KB.Matrixes;
using MathNet.Numerics.LinearAlgebra;
using System.Drawing;
using System.Linq;

namespace KB
{
    public class Deg_Matrixes
    {
        private string[] MonomsFromSbox = new string[] {"13 23 123 24 234",//1
                                                "2 3 13 23 4 14 134 234",
                                                "12 3 13 14 234",
                                                "1 2 12 23 14 24 34",
                                                "12 3 13 123 4 14 24 124 34",//2
                                                "1 12 3 4 124 234",
                                                "1 2 12 3 13 123 4 34 134 234",
                                                "1 12 3 13 23",
                                                "12 3 13 123 4 14 24 124 34 134 234",//3
                                                "2 23 123 14 24 34 34 134",
                                                "2 12 13 23 123 4 14 24 134 234",
                                                "1 2 3 123 124 34 134",
                                                "12 3 13 123 4 14 24 124 34 134 234",//4
                                                "2 12 123 4 14 24 124 134 234",
                                                "1 2 12 13 23 123 124 34 134",
                                                "2 13 23 4 124 234",
                                                "12 3 13 123 4 14 24 124 134",//5
                                                "2 12 3 4 124 134 234",
                                                "12 3 23 123 4 34 134 234",
                                                "1 3 23",
                                                "12 13 23 24 34",//6
                                                "2 13 23 4 34 234",
                                                "3 23 123 4 14 124 234",
                                                "1 2 3 23 123 4 24 134",
                                                "12 13 23 123 4 14 134 234",//7
                                                "1 2 3 123 4 24 4 134 234",
                                                "1 3 23 4 14 24 34 134 234",
                                                "2 3 13 23 14 24 34",
                                                "2 12 3 13 23 124 4 14 24 134 234",//8
                                                "1 2 13 23 123 124 234",
                                                "1 2 12 23 4 14 34 134",
                                                "2 123 14 34 134 234"};
        private string[] MonomsFromShift { get; set; }
        public Matrix<double> EndDeg { get; set; }

        public Deg_Matrixes()
        {
            var x = MonomsFromSbox.Length;
            GenerateForShift();
            var s = CreateMassives();
            var transponse = new double[32][];
            for (int i = 0; i < 32; i++)
            {
                var current = new double[32];
                for (int j = 31; j >=0; j--)
                {
                    current[j] = s[j][i];
                }
                transponse[i] = current;
            }
            var afterSum = Multiply_Deg(transponse, MonomsFromSbox);
            var afterShift = Multiply_Deg(afterSum, MonomsFromShift);
            this.EndDeg = Matrix<double>.Build.DenseOfRowArrays(afterSum);
        }

        private double[][] Multiply_Deg(double[][] m1, string[] columns)
        {
            var massives = m1;
            var endOne = new double[32][];
            for (int i = 0; i < 8; i++)
            {
                var currentVectors = new double[4][];
                var currentDict = new Dictionary<char, double[]>();
                for (int j = 0; j < 4; j++)
                {
                    currentVectors[3-j] = massives[j + 4 * i];
                    currentDict.Add((j + 1 + "")[0], currentVectors[3-j]);
                }
                for (int j = 0; j < 4; j++)
                {
                    var currentStings = MonomsFromSbox[j + 4 * i].Split(" ");
                    var currentElemets = new double[currentStings.Length][];
                    for (int k = 0; k < currentStings.Length; k++)
                    {
                        currentElemets[k] = MultiplyVectors_Deg(currentVectors, currentDict, currentStings[k]);
                    }
                    var current = CombineAll(currentElemets);
                    endOne[j + 4 * i] = current;
                }
            }
            return endOne;
        }

        private double[] CombineAll(double[][] vectors)
        {
            var number = vectors.Length;
            var result = new double[32];
            for (int i = 0; i < 32; i++)
            {
                for (int j = 0; j < number; j++)
                {
                    result[i] = Math.Max(result[i], vectors[j][i]);
                }
            }
            return result;
        }

        private double[] MultiplyVectors_Deg(double[][] vec, Dictionary<char, double[]> dict, string currentMonom)
        {
            var result = dict[currentMonom[0]];
            for (int i = 0; i < currentMonom.Length - 1; i++)
            {
                var next = dict[currentMonom[i + 1]];
                for (int j = 0; j < result.Length; j++)
                {
                    if (result[j] * next[j] == 0)
                        result[j] = Math.Max(result[j], next[j]);
                    else
                        result[j] = result[j] + next[j];
                }
            }
            for (int i = 0; i < result.Length; i++)
            {
                if (result[i] > 32)
                    result[i] = 32;
            }
            return result;
        }

        private void GenerateForShift()
        {
            var result = new string[32];
            for (int i = 0; i < 21; i++)
            {
                result[i] = string.Format("{0}", i + 11 + 1);
            }
            for (int i = 21; i < 32; i++)
            {
                result[i] = string.Format("{0}", i - 21 + 1);
            }
            this.MonomsFromShift = result;
        }
        private double[][] CreateMassives()
        {
            var x = new double[32][];
            for (int i = 0; i < x.Length; i++)
            {
                x[i] = new double[32];
                for (int j = 0; j < 32; j++)
                {
                    var current = i % 32;
                    if (current == j)
                        x[i][j] = 1;
                    else if (current > j)
                        x[i][j] = i + 1;
                }
            }
            return x;
        }

    }
}
